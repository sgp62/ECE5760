///////////////////////////////////////
/// 640x480 version! 16-bit color
/// This code will segfault the original
/// DE1 computer
/// compile with
/// gcc graphics_video_16bit.c -o gr -O2 -lm
///
///////////////////////////////////////
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/mman.h>
#include <sys/time.h>
#include <math.h>
#include <pthread.h>
//#include "address_map_arm_brl4.h"

// video display
#define SDRAM_BASE 0xC0000000
#define SDRAM_END 0xC3FFFFFF
#define SDRAM_SPAN 0x04000000
// span including PIO ports
#define SDRAM_FPGA_SPAN 0x06000000

// offsets for x, y, and z outputs of integrator
#define XOUT_READ 0x5000000
#define YOUT_READ 0x5000010
#define ZOUT_READ 0x5000020

// clock and reset signal
#define CLK_RESET_WRITE 0x5000030

// offsets for sending parameter values from ARM to FPGA
#define SIGMA_WRITE 0x5000040
#define BETA_WRITE 0x5000050
#define RHO_WRITE 0x5000060

// offsets for sending init. cond. from ARM to FPGA
#define XI_WRITE 0x5000070
#define YI_WRITE 0x5000080
#define ZI_WRITE 0x5000090

// pointers corresponding to PIO ports
volatile int *pio_fpga_xout_ptr = NULL;
volatile int *pio_fpga_yout_ptr = NULL;
volatile int *pio_fpga_zout_ptr = NULL;
volatile unsigned int *pio_clk_reset_ptr = NULL;

volatile int *pio_sigma_ptr = NULL;
volatile int *pio_beta_ptr = NULL;
volatile int *pio_rho_ptr = NULL;

volatile int *pio_xi_ptr = NULL;
volatile int *pio_yi_ptr = NULL;
volatile int *pio_zi_ptr = NULL;

float fix_to_float(int fix);
int float_to_fix(double f);

// characters
#define FPGA_CHAR_BASE 0xC9000000
#define FPGA_CHAR_END 0xC9001FFF
#define FPGA_CHAR_SPAN 0x00002000
/* Cyclone V FPGA devices */
#define HW_REGS_BASE 0xff200000
//#define HW_REGS_SPAN        0x00200000
#define HW_REGS_SPAN 0x00005000

// graphics primitives
void VGA_text(int, int, char *);
void VGA_text_clear();
void VGA_box(int, int, int, int, short);
void VGA_rect(int, int, int, int, short);
void VGA_line(int, int, int, int, short);
void VGA_Vline(int, int, int, short);
void VGA_Hline(int, int, int, short);
void VGA_disc(int, int, int, short);
void VGA_circle(int, int, int, int);
// 16-bit primary colors
#define red (0 + (0 << 5) + (31 << 11))
#define dark_red (0 + (0 << 5) + (15 << 11))
#define green (0 + (63 << 5) + (0 << 11))
#define dark_green (0 + (31 << 5) + (0 << 11))
#define blue (31 + (0 << 5) + (0 << 11))
#define dark_blue (15 + (0 << 5) + (0 << 11))
#define yellow (0 + (63 << 5) + (31 << 11))
#define cyan (31 + (63 << 5) + (0 << 11))
#define magenta (31 + (0 << 5) + (31 << 11))
#define black (0x0000)
#define gray (15 + (31 << 5) + (51 << 11))
#define white (0xffff)
int colors[] = {red, dark_red, green, dark_green, blue, dark_blue,
								yellow, cyan, magenta, gray, black, white};

// pixel macro
#define VGA_PIXEL(x, y, color)                                           \
	do                                                                     \
	{                                                                      \
		int *pixel_ptr;                                                      \
		pixel_ptr = (int *)((char *)vga_pixel_ptr + (((y)*640 + (x)) << 1)); \
		*(short *)pixel_ptr = (color);                                       \
	} while (0)

// the light weight buss base
void *h2p_lw_virtual_base;

// pixel buffer
volatile unsigned int *vga_pixel_ptr = NULL;
void *vga_pixel_virtual_base;

// character buffer
volatile unsigned int *vga_char_ptr = NULL;
void *vga_char_virtual_base;

// /dev/mem file id
int fd;

// measure time
struct timeval t1, t2;
double elapsedTime;

// clock period in microseconds
unsigned long clock_period = 10000;

// token for string parsing
char *token;

unsigned int updated_params = 0;

unsigned int paused = 0;

#define SCALE (4.6)

// Mutexes

pthread_mutex_t clk_mtx = PTHREAD_MUTEX_INITIALIZER;
char input_buffer[64];

// send reset signal and clear VGA screen
void reset(void)
{
	// Acquire mutex and manually send reset active high signal
	pthread_mutex_lock(&clk_mtx);
	*pio_clk_reset_ptr = 2; // 10 reset high, clock low
	*pio_clk_reset_ptr = 3; // 11 reset high, clock high
	*pio_clk_reset_ptr = 0; // 00 reset low, clock low
	pthread_mutex_unlock(&clk_mtx);

	// Clears the screen
	VGA_box(0, 0, 639, 479, 0x0000);
}

/* reset the integrator and screen and poll for new paramaters and initial
 * conditions
 */
void reset_and_init(void)
{
	paused = 1; // pause screen
	reset();
	printf("Enter values for sigma, beta, and rho in the form: sigma,beta,rho:\n");
	scanf("%s", input_buffer);

	// Read and parse string for sigma,beta,rho
	token = strtok(input_buffer, ",");
	*pio_sigma_ptr = float_to_fix(atof(token));
	token = strtok(NULL, ",");
	*pio_beta_ptr = float_to_fix(atof(token));
	token = strtok(NULL, ",");
	*pio_rho_ptr = float_to_fix(atof(token));

	updated_params = 1;

	printf("Enter values for initial conditions in the form: xi,yi,zi:\n");
	scanf("%s", input_buffer);

	// Parse string for initial conditions
	token = strtok(input_buffer, ",");
	*pio_xi_ptr = float_to_fix(atof(token));

	token = strtok(NULL, ",");
	*pio_yi_ptr = float_to_fix(atof(token));

	token = strtok(NULL, ",");
	*pio_zi_ptr = float_to_fix(atof(token));
	paused = 0;
}

/* Thread to constantly wait and parse user input
 */
void *scanner()
{
	while (1)
	{
		// Wait for user command input
		printf("Enter R:reset, P:pause/play, SP:<#>:speed, SIG:<#>:sigma, BETA:<#>:beta, RHO:<#>:rho, C:clear\n");
		scanf("%s", input_buffer);

		token = strtok(input_buffer, ":");
		if (strcmp(token, "R") == 0)
		{
			// reset and set initial conditions
			// CLEAR SCREEN
			reset_and_init();
		}
		// Pause command
		else if (strcmp(token, "P") == 0)
		{
			paused = paused ^ 1;
			pthread_mutex_lock(&clk_mtx);
			*pio_clk_reset_ptr = 0;
			pthread_mutex_unlock(&clk_mtx);
		}
		// Change speed
		else if (strcmp(token, "SP") == 0)
		{
			token = strtok(NULL, ":");
			clock_period = (unsigned long)(10000 / (atof(token)));
		}
		// Set sigma
		else if (strcmp(token, "SIG") == 0)
		{
			token = strtok(NULL, ":");
			*pio_sigma_ptr = float_to_fix(atof(token));
			updated_params = 1;
			reset();
		}
		// Set beta
		else if (strcmp(token, "BETA") == 0)
		{
			token = strtok(NULL, ":");
			*pio_beta_ptr = float_to_fix(atof(token));
			updated_params = 1;
			reset();
		}
		// Set rho
		else if (strcmp(token, "RHO") == 0)
		{
			token = strtok(NULL, ":");
			*pio_rho_ptr = float_to_fix(atof(token));
			updated_params = 1;
			reset();
		}
		// Clear screen
		else if (strcmp(token, "C") == 0)
		{
			reset();
		}
		else
		{
			printf("Unrecognized format...please try again.\n");
		}
	}
}

/* Thread to toggle clock, and draw Lorenz curves and associated text
 * to VGA screen
 */
void *draw_and_clock()
{
	float x;
	float y;
	float z;

	// read in time to know when to toggle clock
	gettimeofday(&t1, NULL);
	unsigned long last_time = (unsigned long)t1.tv_usec;
	while (1)
	{
		// convert values sent through PIO ports to from fixed point to floats
		x = SCALE * fix_to_float(*pio_fpga_xout_ptr);
		y = SCALE * fix_to_float(*pio_fpga_yout_ptr);
		z = SCALE * fix_to_float(*pio_fpga_zout_ptr);
		gettimeofday(&t1, NULL);

		// Toggle clock and draw pixel only after specified clock period
		if ((((unsigned long)t1.tv_usec - last_time) > clock_period) && !paused)
		{
			last_time = (unsigned long)t1.tv_usec;
			pthread_mutex_lock(&clk_mtx);
			*pio_clk_reset_ptr = *pio_clk_reset_ptr ^ 0x1;
			pthread_mutex_unlock(&clk_mtx);

			// x-y view
			// note: DOES NOT HAVE BOUNDARY CHECK - beware of segfault
			VGA_PIXEL((unsigned int)(300 + x), (unsigned int)(150 + y), white);

			// x-z view
			// note: DOES NOT HAVE BOUNDARY CHECK - beware of segfault
			VGA_PIXEL((unsigned int)(150 + x), (unsigned int)(210 + z), yellow);

			// y-z view
			// note: DOES NOT HAVE BOUNDARY CHECK - beware of segfault
			VGA_PIXEL((unsigned int)(520 + y), (unsigned int)(210 + z), cyan);

			// check if there are user updates to the 3 parameter values
			if (updated_params)
			{
				// clear the text
				VGA_text_clear();

				// display parameters
				char sigma_text[40];
				char beta_text[40];
				char rho_text[40];
				sprintf(sigma_text, "sigma: %f", fix_to_float(*pio_sigma_ptr));
				sprintf(beta_text, "beta: %f", fix_to_float(*pio_beta_ptr));
				sprintf(rho_text, "rho: %f", fix_to_float(*pio_rho_ptr));
				VGA_text(5, 1, sigma_text);
				VGA_text(5, 2, beta_text);
				VGA_text(5, 3, rho_text);

				// label dimensions
				char xy_text[] = "XY View";
				char xz_text[] = "XZ View";
				char yz_text[] = "YZ View";
				VGA_text(295, 5, xy_text);
				VGA_text(10, 22, xz_text);
				VGA_text(190, 21, yz_text);
				updated_params = 0;
			}
		}
	}
}

// convert 32-bit sign extended 7.20 fixed point to float
float fix_to_float(int fix)
{
	// fix: {31:20} int bits {19:0} decimal bits
	return ((float)fix / (float)(1 << 20));
}

// convert float to 32-bit sign extended 7.20 fixed point
int float_to_fix(double f)
{
	// fix: {31:20} int bits {19:0} decimal bits
	return (int)((float)f * (float)(1 << 20));
}

int main(void)
{

	// === need to mmap: =======================
	// FPGA_CHAR_BASE
	// FPGA_ONCHIP_BASE
	// HW_REGS_BASE

	// === get FPGA addresses ==================
	// Open /dev/mem
	if ((fd = open("/dev/mem", (O_RDWR | O_SYNC))) == -1)
	{
		printf("ERROR: could not open \"/dev/mem\"...\n");
		return (1);
	}

	// get virtual addr that maps to physical
	h2p_lw_virtual_base = mmap(NULL, HW_REGS_SPAN, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, HW_REGS_BASE);
	if (h2p_lw_virtual_base == MAP_FAILED)
	{
		printf("ERROR: mmap1() failed...\n");
		close(fd);
		return (1);
	}

	// === get VGA char addr =====================
	// get virtual addr that maps to physical
	vga_char_virtual_base = mmap(NULL, FPGA_CHAR_SPAN, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, FPGA_CHAR_BASE);
	if (vga_char_virtual_base == MAP_FAILED)
	{
		printf("ERROR: mmap2() failed...\n");
		close(fd);
		return (1);
	}

	// Get the address that maps to the FPGA LED control
	vga_char_ptr = (unsigned int *)(vga_char_virtual_base);

	// === get VGA pixel addr ====================
	// get virtual addr that maps to physical
	vga_pixel_virtual_base = mmap(NULL, SDRAM_FPGA_SPAN, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, SDRAM_BASE);
	if (vga_pixel_virtual_base == MAP_FAILED)
	{
		printf("ERROR: mmap3() failed...\n");
		close(fd);
		return (1);
	}

	// Get the address that maps to the FPGA pixel buffer
	vga_pixel_ptr = (unsigned int *)(vga_pixel_virtual_base);

	// === Get the address that maps to the PIO ports ====================
	// Integrator outputs
	pio_fpga_xout_ptr = (unsigned int *)(vga_pixel_virtual_base + XOUT_READ);
	pio_fpga_yout_ptr = (unsigned int *)(vga_pixel_virtual_base + YOUT_READ);
	pio_fpga_zout_ptr = (unsigned int *)(vga_pixel_virtual_base + ZOUT_READ);
	// Clock and reset signals
	pio_clk_reset_ptr = (unsigned int *)(vga_pixel_virtual_base + CLK_RESET_WRITE);
	// Parameter values
	pio_sigma_ptr = (unsigned int *)(vga_pixel_virtual_base + SIGMA_WRITE);
	pio_beta_ptr = (unsigned int *)(vga_pixel_virtual_base + BETA_WRITE);
	pio_rho_ptr = (unsigned int *)(vga_pixel_virtual_base + RHO_WRITE);
	// Initial condition values
	pio_xi_ptr = (unsigned int *)(vga_pixel_virtual_base + XI_WRITE);
	pio_yi_ptr = (unsigned int *)(vga_pixel_virtual_base + YI_WRITE);
	pio_zi_ptr = (unsigned int *)(vga_pixel_virtual_base + ZI_WRITE);

	VGA_text_clear();
	// clear the screen
	VGA_box(0, 0, 639, 479, 0x0000);

	// send reset signal to integrator and initalize values
	reset_and_init();

	// signal that parameters have been updated
	updated_params = 1;

	// scanning (user input thread) and draw/clock thread
	pthread_t thread_scan, thread_draw;

	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

	// create threads
	pthread_create(&thread_scan, NULL, scanner, NULL);
	pthread_create(&thread_draw, NULL, draw_and_clock, NULL);

	// join threads
	pthread_join(thread_scan, NULL);
	pthread_join(thread_draw, NULL);
	return 0;
} // end main

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
 ****************************************************************************************/
void VGA_text(int x, int y, char *text_ptr)
{
	volatile char *character_buffer = (char *)vga_char_ptr; // VGA character buffer
	int offset;
	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while (*(text_ptr))
	{
		// write to the character buffer
		*(character_buffer + offset) = *(text_ptr);
		++text_ptr;
		++offset;
	}
}

/****************************************************************************************
 * Subroutine to clear text to the VGA monitor
 ****************************************************************************************/
void VGA_text_clear()
{
	volatile char *character_buffer = (char *)vga_char_ptr; // VGA character buffer
	int offset, x, y;
	for (x = 0; x < 79; x++)
	{
		for (y = 0; y < 59; y++)
		{
			/* assume that the text string fits on one line */
			offset = (y << 7) + x;
			// write to the character buffer
			*(character_buffer + offset) = ' ';
		}
	}
}

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
 ****************************************************************************************/
#define SWAP(X, Y) \
	do               \
	{                \
		int temp = X;  \
		X = Y;         \
		Y = temp;      \
	} while (0)

void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
	char *pixel_ptr;
	int row, col;

	/* check and fix box coordinates to be valid */
	if (x1 > 639)
		x1 = 639;
	if (y1 > 479)
		y1 = 479;
	if (x2 > 639)
		x2 = 639;
	if (y2 > 479)
		y2 = 479;
	if (x1 < 0)
		x1 = 0;
	if (y1 < 0)
		y1 = 0;
	if (x2 < 0)
		x2 = 0;
	if (y2 < 0)
		y2 = 0;
	if (x1 > x2)
		SWAP(x1, x2);
	if (y1 > y2)
		SWAP(y1, y2);
	for (row = y1; row <= y2; row++)
		for (col = x1; col <= x2; ++col)
		{
			// 640x480
			// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
			//  set pixel color
			//*(char *)pixel_ptr = pixel_color;
			VGA_PIXEL(col, row, pixel_color);
		}
}

/****************************************************************************************
 * Draw a outline rectangle on the VGA monitor
 ****************************************************************************************/
#define SWAP(X, Y) \
	do               \
	{                \
		int temp = X;  \
		X = Y;         \
		Y = temp;      \
	} while (0)

void VGA_rect(int x1, int y1, int x2, int y2, short pixel_color)
{
	char *pixel_ptr;
	int row, col;

	/* check and fix box coordinates to be valid */
	if (x1 > 639)
		x1 = 639;
	if (y1 > 479)
		y1 = 479;
	if (x2 > 639)
		x2 = 639;
	if (y2 > 479)
		y2 = 479;
	if (x1 < 0)
		x1 = 0;
	if (y1 < 0)
		y1 = 0;
	if (x2 < 0)
		x2 = 0;
	if (y2 < 0)
		y2 = 0;
	if (x1 > x2)
		SWAP(x1, x2);
	if (y1 > y2)
		SWAP(y1, y2);
	// left edge
	col = x1;
	for (row = y1; row <= y2; row++)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}

	// right edge
	col = x2;
	for (row = y1; row <= y2; row++)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}

	// top edge
	row = y1;
	for (col = x1; col <= x2; ++col)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}

	// bottom edge
	row = y2;
	for (col = x1; col <= x2; ++col)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}
}

/****************************************************************************************
 * Draw a horixontal line on the VGA monitor
 ****************************************************************************************/
#define SWAP(X, Y) \
	do               \
	{                \
		int temp = X;  \
		X = Y;         \
		Y = temp;      \
	} while (0)

void VGA_Hline(int x1, int y1, int x2, short pixel_color)
{
	char *pixel_ptr;
	int row, col;

	/* check and fix box coordinates to be valid */
	if (x1 > 639)
		x1 = 639;
	if (y1 > 479)
		y1 = 479;
	if (x2 > 639)
		x2 = 639;
	if (x1 < 0)
		x1 = 0;
	if (y1 < 0)
		y1 = 0;
	if (x2 < 0)
		x2 = 0;
	if (x1 > x2)
		SWAP(x1, x2);
	// line
	row = y1;
	for (col = x1; col <= x2; ++col)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}
}

/****************************************************************************************
 * Draw a vertical line on the VGA monitor
 ****************************************************************************************/
#define SWAP(X, Y) \
	do               \
	{                \
		int temp = X;  \
		X = Y;         \
		Y = temp;      \
	} while (0)

void VGA_Vline(int x1, int y1, int y2, short pixel_color)
{
	char *pixel_ptr;
	int row, col;

	/* check and fix box coordinates to be valid */
	if (x1 > 639)
		x1 = 639;
	if (y1 > 479)
		y1 = 479;
	if (y2 > 479)
		y2 = 479;
	if (x1 < 0)
		x1 = 0;
	if (y1 < 0)
		y1 = 0;
	if (y2 < 0)
		y2 = 0;
	if (y1 > y2)
		SWAP(y1, y2);
	// line
	col = x1;
	for (row = y1; row <= y2; row++)
	{
		// 640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10)    + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}
}

/****************************************************************************************
 * Draw a filled circle on the VGA monitor
 ****************************************************************************************/

void VGA_disc(int x, int y, int r, short pixel_color)
{
	char *pixel_ptr;
	int row, col, rsqr, xc, yc;

	rsqr = r * r;

	for (yc = -r; yc <= r; yc++)
		for (xc = -r; xc <= r; xc++)
		{
			col = xc;
			row = yc;
			// add the r to make the edge smoother
			if (col * col + row * row <= rsqr + r)
			{
				col += x; // add the center point
				row += y; // add the center point
				// check for valid 640x480
				if (col > 639)
					col = 639;
				if (row > 479)
					row = 479;
				if (col < 0)
					col = 0;
				if (row < 0)
					row = 0;
				// pixel_ptr = (char *)vga_pixel_ptr + (row<<10) + col ;
				//  set pixel color
				//*(char *)pixel_ptr = pixel_color;
				VGA_PIXEL(col, row, pixel_color);
			}
		}
}

/****************************************************************************************
 * Draw a  circle on the VGA monitor
 ****************************************************************************************/

void VGA_circle(int x, int y, int r, int pixel_color)
{
	char *pixel_ptr;
	int row, col, rsqr, xc, yc;
	int col1, row1;
	rsqr = r * r;

	for (yc = -r; yc <= r; yc++)
	{
		// row = yc;
		col1 = (int)sqrt((float)(rsqr + r - yc * yc));
		// right edge
		col = col1 + x; // add the center point
		row = yc + y;		// add the center point
		// check for valid 640x480
		if (col > 639)
			col = 639;
		if (row > 479)
			row = 479;
		if (col < 0)
			col = 0;
		if (row < 0)
			row = 0;
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10) + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
		// left edge
		col = -col1 + x; // add the center point
		// check for valid 640x480
		if (col > 639)
			col = 639;
		if (row > 479)
			row = 479;
		if (col < 0)
			col = 0;
		if (row < 0)
			row = 0;
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10) + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}
	for (xc = -r; xc <= r; xc++)
	{
		// row = yc;
		row1 = (int)sqrt((float)(rsqr + r - xc * xc));
		// right edge
		col = xc + x;		// add the center point
		row = row1 + y; // add the center point
		// check for valid 640x480
		if (col > 639)
			col = 639;
		if (row > 479)
			row = 479;
		if (col < 0)
			col = 0;
		if (row < 0)
			row = 0;
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10) + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
		// left edge
		row = -row1 + y; // add the center point
		// check for valid 640x480
		if (col > 639)
			col = 639;
		if (row > 479)
			row = 479;
		if (col < 0)
			col = 0;
		if (row < 0)
			row = 0;
		// pixel_ptr = (char *)vga_pixel_ptr + (row<<10) + col ;
		//  set pixel color
		//*(char *)pixel_ptr = pixel_color;
		VGA_PIXEL(col, row, pixel_color);
	}
}

// =============================================
// === Draw a line
// =============================================
// plot a line
// at x1,y1 to x2,y2 with color
// Code is from David Rodgers,
//"Procedural Elements of Computer Graphics",1985
void VGA_line(int x1, int y1, int x2, int y2, short c)
{
	int e;
	signed int dx, dy, j, temp;
	signed int s1, s2, xchange;
	signed int x, y;
	char *pixel_ptr;

	/* check and fix line coordinates to be valid */
	if (x1 > 639)
		x1 = 639;
	if (y1 > 479)
		y1 = 479;
	if (x2 > 639)
		x2 = 639;
	if (y2 > 479)
		y2 = 479;
	if (x1 < 0)
		x1 = 0;
	if (y1 < 0)
		y1 = 0;
	if (x2 < 0)
		x2 = 0;
	if (y2 < 0)
		y2 = 0;

	x = x1;
	y = y1;

	// take absolute value
	if (x2 < x1)
	{
		dx = x1 - x2;
		s1 = -1;
	}

	else if (x2 == x1)
	{
		dx = 0;
		s1 = 0;
	}

	else
	{
		dx = x2 - x1;
		s1 = 1;
	}

	if (y2 < y1)
	{
		dy = y1 - y2;
		s2 = -1;
	}

	else if (y2 == y1)
	{
		dy = 0;
		s2 = 0;
	}

	else
	{
		dy = y2 - y1;
		s2 = 1;
	}

	xchange = 0;

	if (dy > dx)
	{
		temp = dx;
		dx = dy;
		dy = temp;
		xchange = 1;
	}

	e = ((int)dy << 1) - dx;

	for (j = 0; j <= dx; j++)
	{
		// video_pt(x,y,c); //640x480
		// pixel_ptr = (char *)vga_pixel_ptr + (y<<10)+ x;
		//  set pixel color
		//*(char *)pixel_ptr = c;
		VGA_PIXEL(x, y, c);

		if (e >= 0)
		{
			if (xchange == 1)
				x = x + s1;
			else
				y = y + s2;
			e = e - ((int)dx << 1);
		}

		if (xchange == 1)
			y = y + s2;
		else
			x = x + s1;

		e = e + ((int)dy << 1);
	}
}